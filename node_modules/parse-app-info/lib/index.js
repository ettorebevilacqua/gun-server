"use strict";

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

const readPkgUp = require('read-pkg-up');

const LastCommitLog = require('last-commit-log');

const debug = require('debug')('parse-app-info'); //
// Information about the app.
//
// The git infos can be missing if the project has no commit yet
// or is not connected to a git repo.
//
// * name - The name of the app
// * version - The version of the app
// * node - NodeJS version
// * hash - Last git commit hash
// * tag - Last git tag, if any
// * environment - Nodejs environment the app is run in
// * hostname - Name of the computer the app is run on
// * pid - Process ID of the app
//
// Retrieves informations about the current running app.


function parseAppInfo() {
  const packageInfo = readPkgUp.sync();
  const info = {};

  if (typeof packageInfo === 'object' && typeof packageInfo.package === 'object') {
    if (typeof packageInfo.package.name === 'string') info.name = packageInfo.package.name;
    if (typeof packageInfo.package.version === 'string') info.version = packageInfo.package.version;
  }

  const lastCommitLog = new LastCommitLog();
  let hash;
  let gitTag;

  try {
    var _lastCommitLog$getLas = lastCommitLog.getLastCommitSync();

    hash = _lastCommitLog$getLas.hash;
    gitTag = _lastCommitLog$getLas.gitTag;
  } catch (err) {
    debug(err);
  }

  const lastCommit = {
    hash
  };
  if (gitTag) lastCommit.tag = gitTag;
  const _process$env = process.env,
        NODE_ENV = _process$env.NODE_ENV,
        HOSTNAME = _process$env.HOSTNAME;
  return _objectSpread({}, info, {
    node: process.version
  }, lastCommit, {
    environment: NODE_ENV || 'development',
    hostname: HOSTNAME || require('os').hostname(),
    pid: process.pid
  });
}

module.exports = parseAppInfo;